import pandas as pd
import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, BatchNormalization
from tensorflow.keras.utils import normalize
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop

df_train = pd.read_csv("train.csv")
df_test = pd.read_csv("test.csv")

train = df_train.iloc[:,1:].values.astype("float32")
labels = df_train.iloc[:,0].values.astype("float32")
test = df_test.iloc[:,:].values.astype("float32")
train = train.reshape(42000,28,28)
test = test.reshape(test.shape[0],28,28)

x_train = normalize(train, axis=1)
x_test = normalize(test, axis=1)
x_train = np.array(x_train).reshape(-1,28,28,1)

model = Sequential()
model.add(Conv2D(32,(2,2),input_shape = x_train.shape[1:]))
model.add(BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer='uniform',name='batch1'))
model.add(Activation("relu"))
model.add(Conv2D(32,(2,2)))
model.add(BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer='uniform',name='batch2'))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(2,2)))
model.add(BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer='uniform',name='batch3'))
model.add(Activation("relu"))
model.add(Conv2D(63,(2,2)))
model.add(BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer='uniform',name='batch4'))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
model.add(Dense(256))
model.add(Activation("relu"))

model.add(Dense(10))
model.add(Activation("softmax"))
optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)
model.compile(loss="sparse_categorical_crossentropy",
              optimizer=optimizer,
              metrics=["accuracy"],)

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=False,  # randomly flip images
        vertical_flip=False)  # randomly flip images

datagen.fit(x_train)

model.fit_generator(datagen.flow(x_train,labels, batch_size=86),
                              epochs = 10, validation_data = (x_train,labels),
                              verbose = 2, steps_per_epoch=x_train.shape[0] // 86)
#
# model.fit(x_train,labels,batch_size=32,epochs=7,validation_split=0.2)

model.save("CNN_1")